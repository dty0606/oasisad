study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
##return a list with the preprocessed images and a brain mask
return(study)
}
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
#' @title OASISAD image preprocessing function
#' @description  MRI image data preprocessing with multiple inputs
#' @param flair Input FLAIR image
#' @param t1 Input T1 image
#' @param t2 Input T2 image
#' @param pd Input PD image
#' @param img_space An image to register and use for creating brain mask if needed.
#' If NULL, 'flair' image will be used in registration.
#' @param brain_mask Input brain_mask, if null, a mask will be obtained by FSL
#' @param dir A user defined output
#' @param cores A number indicates how many cores used mclapply
#' @param verbose A boolean indicated whether output messages
oasisad_pre <- function(flair, #flair volume of class nifti
t1, # t1 volume of class nifti
t2 = NULL, # t2 volume of class nifti
pd = NULL, # pd volume of class nifti
img_space = NULL,
brain_mask = NULL,
dir = NULL,
cores = 1, # number of cores used in mclapply,
verbose = NULL
){
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
if(sum(temp) > 0){
img_type <- names(study)[which(temp)]
}
study_temp <- study
study_temp[[img_type]] <- NULL
study_temp <- mclapply(study_temp, flirt, reffile = img_space, mc.cores = cores)
study_temp[[img_type]] <- study[[img_type]]
study <- study_temp
rm(study_temp)
#create brain mask
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
brain_mask <- fslbet_robust(img_space, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
##return a list with the preprocessed images and a brain mask
return(study)
}
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
img_space = img_space,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
oasisad_study <- preprocess[c("flair","t1", "t2", "pd")]
brain_mask <- preprocess$brain_mask
# REMOVE NULL
nulls <- sapply(oasis_study, is.null)
# REMOVE NULL
nulls <- sapply(oasisad_study, is.null)
oasisad_study <- oasisad_study[!nulls]
##erode mask if needed
brain_mask <- correct_image_dim(brain_mask)
##erode mask if needed
if(erode){
if (verbose) {
message("Eroding Brain Mask")
}
brain_mask <- fslerode(brain_mask,
kopts = "-kernel box 5x5x5",
retimg = TRUE)
}
##erode mask if needed
if(eroder){
if (verbose) {
message("Eroding Brain Mask")
}
brain_mask <- fslerode(brain_mask,
kopts = "-kernel box 5x5x5",
retimg = TRUE)
}
# removing voxels below a certain quantile if needed
if(!is.null(voxel_select)){
top_voxels <- voxel_selection(flair = oasis_study$flair,
brain_mask = brain_mask,
cutoff = voxel_select)
oasis_studyad$top_voxels <- top_voxels
rm(top_voxels)
}
# the image normalization
if (normalize == TRUE) {
if (verbose) {
message("Normalizing Images using Z-score")
}
oasisad_study <- lapply(oasisad_study, zscore_img,
mask = brain_mask,
margin = NULL)
}
# smoothing images
if (image_sm == TRUE) {
if (verbose) {
message("Smoothing Images: width = 10")
}
# smooth the images using fslsmooth from the fslr package
smooth_10 <- mclapply(oasisad_study, fslsmooth,
sigma = 10,
mask = brain_mask,
retimg = TRUE,
smooth_mask = TRUE,
mc.cores = cores)
oasisad_study <- c(oasisad_study, smooth_10)
if (verbose) {
message("Smoothing Images: width = 20")
}
smooth_20 <- mclapply(oasisad_study, fslsmooth,
sigma = 20,
mask = brain_mask,
retimg = TRUE,
smooth_mask = TRUE,
mc.cores = cores)
oasisad_study <- c(oasisad_study, smooth_20)
rm(list = c("smooth_10","smooth_20"))
}
# check gold_standard and attach to oasis_study dataframe
gold_standard <- check_nifti2(gold_standard)
oasisad_study$GoldStandard <- gold_standard
#######################################
# Make data.frame
#######################################
oasisad_data<- lapply(oasisad_study, c)
oasisad_data <- as.data.frame(oasisad_data)
rownames(oasisad_data) = NULL
######################
# Keep index
######################
indx <- niftiarr(brain_mask, 1)
indx <- which(indx == 1, arr.ind = TRUE)
orientations <- c("axial", "coronal", "sagittal")
colnames(indx) <- orientations
oasiad_data <- cbind(oasisad_data, indx)
View(oasiad_data)
######################
# If Keep Voxel Selection
######################
if(!is.null(voxel_select)){
oasisad_data <- oasisad_data[oasisad_data$top_voxels == 1, ]
oasisad_data$top_voxels <- NULL
}
######################
# If select slices
######################
if (!is.null(slices)) {
orientation <- match.arg(orientation)
oasisad_data <- oasisad_data[oasisad_data[, orientation] %in% slices, ]
}
cn <- colnames(oasisad_data)
cn <- setdiff(cn, orientations)
oasisad_data = oasisad_data[, cn]
View(oasisad_data)
oasisad_data <- cbind(oasisad_data, indx, c(1:length(brain_mask)))
View(oasisad_data)
######################
# output voxels within brain mask
######################
oasisad_data <- oasisad_data[which(brain_mask != 0), ]
#data
setwd("data")
library(neurobase)
library(extrantsr)
library(ANTsR)
library(fslr)
library(parallel)
#ids
train_id <- c('0097RS','0120LB')
valid_id <- '0177CR'
test_id <- '0064KW'
#read data
train_raw <- list()
train_raw$flair <- list(readnii('0097RS_flair.nii'),
readnii('0120LB_flair.nii'))
train_raw$t1 <- list(readnii('0097RS_hires+acpc.nii.gz'),
readnii('0120LB_hires+acpc.nii'))
train_raw$gs <- list(readnii('0097RS_flair_tracing.nii.gz'),
readnii('0120LB_flair_tracing.nii'))
valid_raw <- list()
valid_raw$flair <- list(readnii('0177CR_flair.nii'))
valid_raw$t1 <- list(readnii('0177CR_hires+acpc.nii.gz'))
valid_raw$gs <- list(readnii('0177CR_flair_tracing.nii'))
test_raw <- list()
test_raw$flair <- list(readnii('0064KW_flair.nii'))
test_raw$t1 <- list(readnii('0064KW_hires+acpc.nii'))
test_raw$gs <- list(('0064KW_flair_tracing.nii.gz'))
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
rm( list = ls())
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list
threshold = NULL
M1 = FALSE
threshold = NULL
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
train_df = train_list
test_df = test_list
threshold = NULL
valid_df = valid_list
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
if(M1){
M1 <- glm(GoldStandard ~ FLAIR*FLAIR_10
+ FLAIR*FLAIR_20 + T1*T1_10 + T1*T1_20, family=binomial, data=df)
}else{
M2 <- glm(GoldStandard ~ FLAIR+T1, family=binomial, data=df)
}
names(train_df)
names(train_list)
length(train_df)
#data manipulation
for(i in train_df){
if(i == 1){
df <- train_df[[i]]
} else {
df <- rbind(df, train_df[[i]])
}
}
#data manipulation
for(i in 1:length(train_df)){
if(i == 1){
df <- train_df[[i]]
} else {
df <- rbind(df, train_df[[i]])
}
}
if(M1){
M1 <- glm(GoldStandard ~ FLAIR*FLAIR_10
+ FLAIR*FLAIR_20 + T1*T1_10 + T1*T1_20, family=binomial, data=df)
}else{
M2 <- glm(GoldStandard ~ FLAIR+T1, family=binomial, data=df)
}
if(M1){
M1 <- glm(GoldStandard ~ *flair_10
+ flair*flair_20 + t1*t1_10 + t1*t1_20, family=binomial, data=df)
}else{
M2 <- glm(GoldStandard ~ flair+t1, family=binomial, data=df)
}
if(M1){
M1 <- glm(GoldStandard ~ *flair_10
+ flair*flair_20 + t1*t1_10 + t1*t1_20, family=binomial, data=df)
}else{
M2 <- glm(GoldStandard ~ flair+t1, family=binomial, data=df)
}
M1 <- glm(GoldStandard ~ flair*flair_10
+ flair*flair_20 + t1*t1_10 + t1*t1_20, family=binomial, data=df)
M1 <- glm(GoldStandard ~ flair*flair_10
+ flair*flair_20 + t1*t1_10 + t1*t1_20, family=binomial, data=df)
M2 <- glm(GoldStandard ~ flair+t1, family=binomial, data=df)
if(M1){
M1 <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=df)
}else{
M2 <- glm(GoldStandard ~ flair+t1, family=binomial, data=df)
}
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
#data
setwd("data")
library(neurobase)
library(extrantsr)
library(ANTsR)
library(fslr)
library(parallel)
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list
threshold = NULL
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
#train, val, test data
for(i in 1:length(train_df)){
if(i == 1){
train <- train_df[[i]]
} else {
train <- rbind(train, train_df[[i]])
}
}
#
if(!is.null(valid)){
for(i in 1:length(valid_df)){
if(i == 1){
valid <- valid_df[[i]]
} else {
valid <- rbind(valid, valid_df[[i]])
}
}
}
#
if(!is.null(valid_df)){
for(i in 1:length(valid_df)){
if(i == 1){
valid <- valid_df[[i]]
} else {
valid <- rbind(valid, valid_df[[i]])
}
}
}
for(i in 1:length(test_df)){
if(i == 1){
test <- test_df[[i]]
} else {
test <- rbind(test, test_df[[i]])
}
}
if(M1){
M1 <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=train)
}else{
M2 <- glm(GoldStandard ~ flair+t1, family=binomial, data=train)
}
seq(0,1,100)
seq(0,1,0.01)
if(M1){
model <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=train)
}else{
model <- glm(GoldStandard ~ flair+t1, family=binomial, data=train)
}
if(M1){
model <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=train)
}else{
model <- glm(GoldStandard ~ flair+t1, family=binomial, data=train)
}
M1 = TRUE
if(M1){
model <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=train)
}else{
model <- glm(GoldStandard ~ flair+t1, family=binomial, data=train)
}
# the default cutoff_list is seq(0,1,0.01)
probs <- predict(model, valid, type = "response")
prob_map = probs
sub <- valid_df[[1]]
names(sub)
sub$indx <- sub$`c(1:length(brain_mask))`
sub$indx <- sub$c(1:length(brain_mask))`
()
q11
,
sub$indx <- sub$`c(1:length(brain_mask))`
sub$`c(1:length(brain_mask))` <- NULL
names(sub)
names(train_list)
names(train_list[[1]])
train_df$wm_mask <- readnii('fslout/train1_pve_2.nii.gz')
train_df$seg_mask <- readnii('fslout/train1_seg.nii.gz')
histogram(train_df$seg_mask )
hist(train_df$seg_mask)
length(train_df)
# load df
load('df/train_df.rda')
train_df = train_list
length(train_df)
train_df[[1]]$wm_mask <- readnii('fslout/train1_pve_2.nii.gz')
str(train_df)
str(train_df[[1]])
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list
threshold = NULL
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
train_df[[1]]$wm_mask <- readnii('fslout/train1_pve_2.nii.gz')
train_df$seg_mask <- readnii('fslout/train1_seg.nii.gz')
train_df$wm_mask <- readnii('fslout/train1_pve_2.nii.gz')
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list
threshold = NULL
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
#train, val, test data
for(i in 1:length(train_df)){
if(i == 1){
train <- train_df[[i]]
} else {
train <- rbind(train, train_df[[i]])
}
}
#
if(!is.null(valid_df)){
for(i in 1:length(valid_df)){
if(i == 1){
valid <- valid_df[[i]]
} else {
valid <- rbind(valid, valid_df[[i]])
}
}
}
for(i in 1:length(test_df)){
if(i == 1){
test <- test_df[[i]]
} else {
test <- rbind(test, test_df[[i]])
}
}
if(M1){
model <- glm(GoldStandard ~ flair*flair.1
+ flair*flair.2 + t1*t1.1 + t1*t1.2, family=binomial, data=train)
}else{
model <- glm(GoldStandard ~ flair+t1, family=binomial, data=train)
}
# the default cutoff_list is seq(0,1,0.01)
probs <- predict(model, valid, type = "response")
i= 1
sub <- valid_df[[1]]
sub <- valid_df[[i]]
sub <- valid_df[[i]]
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list
threshold = NULL
M1 = TRUE
refine = TRUE
neighbor = TRUE
wm_label = NULL
re_value = NULL
train <- train_df[[i]]
train_df = train_list
# load df
load('df/train_df.rda')
load('df/valid_df.rda')
load('df/test_df.rda')
train_df = train_list
test_df = test_list
valid_df = valid_list

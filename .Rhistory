readnii('0120LB_flair_tracing.nii'))
valid_raw <- list()
valid_raw$flair <- readnii('0177CR_flair.nii')
valid_raw$gs <- readnii('0177CR_flair_tracing.nii')
test_raw$flair <- readnii('0064KW_flair.nii')
test_raw$t1 <- readnii('0064KW_hires+acpc.nii.gz')
test_raw$gs <- readnii('0064KW_flair_tracing.nii')
test_raw <- list()
test_raw$flair <- readnii('0064KW_flair.nii')
test_raw$t1 <- readnii('0064KW_hires+acpc.nii')
test_raw$gs <- readnii('0064KW_flair_tracing.nii.gz')
#oasis dataframe
flair = train_raw$flair[[1]] ##flair volume of class nifti
t1 = train_raw$t1[[1]]  ##t1 volume of class nifti
t2 = NULL ##t2 volume of class nifti
pd = NULL ##pd volume of class nifti
gold_standard = train_raw$gs[[1]] ##gold standard mask of class nifti
brain_mask = NULL ##brain mask of class nifti
voxel_select = NULL ##a specifed level to remove voxels whose intensity under
preproc = TRUE ##option to preprocess the data
normalize = TRUE ##option to normalize
image_sm = TRUE ## option to smooth image
slices = NULL #slice vector
orientation = c("axial", "coronal", "sagittal")
return_preproc = FALSE
cores = 1
verbose = TRUE
eroder = TRUE
dir = 'fslout'
eroder = TRUE
dir = 'fslout'
check_nifti2 = function(x) {
if (is.null(x)) {
return(NULL)
} else {
return(check_nifti(x))
}
}
#check input images are nifti
flair <- check_nifti2(flair)
t1 <- check_nifti2(t1)
t2 <- check_nifti2(t2)
pd <- check_nifti2(pd)
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
if (verbose) {
message("Running Brain Extraction Tool\n")
}
is.null(brain_mask)
t1mask
t1mask
t1mask = FALSE
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
library(fslr)
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
library(neuroconductor)
install.packages("neuroconductor")
library(extrantsr)
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
library(ANTsR)
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
get.fsl()
table(brain_mask)
table(brain_mask!=0)
hist(brain_mask)
dim(brain_mask)
ortho2(brain_mask)
ortho2(flair)
ortho2(brain_mask)
ortho2(flair)
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=paste(dir),opts= "-N")
dir = 'fslout/train1'
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
library(parallel)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
#mask input images with brain_mask
study <- check_nifti(study)
cores
dim(brain_mask)
#t1 coregisters to flair
t1_flair <- flirt(t1, flair)
ortho2
ortho2(flair)
ortho2(t1_flair)
ortho2(flair)
img_space = NULL
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
study <- mclapply(study, flirt, reffile = img_space, mc.cores = cores)
ortho2(study$flair)
ortho2(study$t1)
ortho2(flair)
ortho2(study$flair)
identical(flair, img_space)
#check whether img_space is in study or not
sapply(study, identical, y = img_space)
img_space = NULL
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
sapply(study, identical, y = img_space)
identical(study$flair, img_space)
is.null(img_space)
img_space = NULL
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
sapply(study, identical, y = img_space)
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
sapply(study, identical, y = img_space)
!sapply(study, identical, y = img_space)
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
study_temp[[which(temp)]] <- NULL
study_temp <- study
study_temp[[which(temp)]] <- NULL
which(temp)
length(study)
length(study_temp)
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
study_temp <- study
study_temp[[which(temp)]] <- NULL
names(study)
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
temp
which(FALSE)
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
if(sum(temp) > 0){
img_type <- names(study)[which(temp)]
}
study_temp <- study
study_temp[[img_type]] <- NULL
study_temp <- mclapply(study_temp,flirt, reffile = img_space, mc.cores = cores)
study_temp[[img_type]] <- study[[img_type]]
names(study_temp)
study <- study_temp
rm(study_temp)
#create brain mask
if (verbose) {
message("Running Brain Extraction Tool\n")
}
#create brain mask
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
brain_mask <- fslbet_robust(img_space, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
brain_mask <- fslbet_robust(img_space, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
ortho2(study$t1)
ortho2(study$flair)
ortho2(study$t1)
ortho2(study$flair)
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
#' @title OASISAD image preprocessing function
#' @description  MRI image data preprocessing with multiple inputs
#' @param flair Input FLAIR image
#' @param t1 Input T1 image
#' @param t2 Input T2 image
#' @param pd Input PD image
#' @param img_space An image to register and use for creating brain mask if needed.
#' If NULL, 'flair' image will be used in registration.
#' @param brain_mask Input brain_mask, if null, a mask will be obtained by FSL
#' @param dir A user defined output
#' @param cores A number indicates how many cores used mclapply
oasisad_pre <- function(flair, #flair volume of class nifti
t1, # t1 volume of class nifti
t2 = NULL, # t2 volume of class nifti
pd = NULL, # pd volume of class nifti
img_space = NULL,
brain_mask = NULL,
dir = NULL,
cores = 1 # number of cores used in mclapply
){
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
if(sum(temp) > 0){
img_type <- names(study)[which(temp)]
}
study_temp <- study
study_temp[[img_type]] <- NULL
study_temp <- mclapply(study_temp, flirt, reffile = img_space, mc.cores = cores)
study_temp[[img_type]] <- study[[img_type]]
study <- study_temp
rm(study_temp)
#create brain mask
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
brain_mask <- fslbet_robust(img_space, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
##return a list with the preprocessed images and a brain mask
return(study)
}
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
#' @title OASISAD image preprocessing function
#' @description  MRI image data preprocessing with multiple inputs
#' @param flair Input FLAIR image
#' @param t1 Input T1 image
#' @param t2 Input T2 image
#' @param pd Input PD image
#' @param img_space An image to register and use for creating brain mask if needed.
#' If NULL, 'flair' image will be used in registration.
#' @param brain_mask Input brain_mask, if null, a mask will be obtained by FSL
#' @param dir A user defined output
#' @param cores A number indicates how many cores used mclapply
#' @param verbose A boolean indicated whether output messages
oasisad_pre <- function(flair, #flair volume of class nifti
t1, # t1 volume of class nifti
t2 = NULL, # t2 volume of class nifti
pd = NULL, # pd volume of class nifti
img_space = NULL,
brain_mask = NULL,
dir = NULL,
cores = 1, # number of cores used in mclapply,
verbose = NULL
){
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
#coregisters to a same space
if(is.null(img_space)){
img_space <- flair
}
#check whether img_space is in study or not
temp <- sapply(study, identical, y = img_space)
if(sum(temp) > 0){
img_type <- names(study)[which(temp)]
}
study_temp <- study
study_temp[[img_type]] <- NULL
study_temp <- mclapply(study_temp, flirt, reffile = img_space, mc.cores = cores)
study_temp[[img_type]] <- study[[img_type]]
study <- study_temp
rm(study_temp)
#create brain mask
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
brain_mask <- fslbet_robust(img_space, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=dir,opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
##return a list with the preprocessed images and a brain mask
return(study)
}
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
img_space = img_space,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
oasisad_study <- preprocess[c("flair","t1", "t2", "pd")]
brain_mask <- preprocess$brain_mask
# REMOVE NULL
nulls <- sapply(oasis_study, is.null)
# REMOVE NULL
nulls <- sapply(oasisad_study, is.null)
oasisad_study <- oasisad_study[!nulls]
##erode mask if needed
brain_mask <- correct_image_dim(brain_mask)
##erode mask if needed
if(erode){
if (verbose) {
message("Eroding Brain Mask")
}
brain_mask <- fslerode(brain_mask,
kopts = "-kernel box 5x5x5",
retimg = TRUE)
}
##erode mask if needed
if(eroder){
if (verbose) {
message("Eroding Brain Mask")
}
brain_mask <- fslerode(brain_mask,
kopts = "-kernel box 5x5x5",
retimg = TRUE)
}
# removing voxels below a certain quantile if needed
if(!is.null(voxel_select)){
top_voxels <- voxel_selection(flair = oasis_study$flair,
brain_mask = brain_mask,
cutoff = voxel_select)
oasis_studyad$top_voxels <- top_voxels
rm(top_voxels)
}
# the image normalization
if (normalize == TRUE) {
if (verbose) {
message("Normalizing Images using Z-score")
}
oasisad_study <- lapply(oasisad_study, zscore_img,
mask = brain_mask,
margin = NULL)
}
# smoothing images
if (image_sm == TRUE) {
if (verbose) {
message("Smoothing Images: width = 10")
}
# smooth the images using fslsmooth from the fslr package
smooth_10 <- mclapply(oasisad_study, fslsmooth,
sigma = 10,
mask = brain_mask,
retimg = TRUE,
smooth_mask = TRUE,
mc.cores = cores)
oasisad_study <- c(oasisad_study, smooth_10)
if (verbose) {
message("Smoothing Images: width = 20")
}
smooth_20 <- mclapply(oasisad_study, fslsmooth,
sigma = 20,
mask = brain_mask,
retimg = TRUE,
smooth_mask = TRUE,
mc.cores = cores)
oasisad_study <- c(oasisad_study, smooth_20)
rm(list = c("smooth_10","smooth_20"))
}
# check gold_standard and attach to oasis_study dataframe
gold_standard <- check_nifti2(gold_standard)
oasisad_study$GoldStandard <- gold_standard
#######################################
# Make data.frame
#######################################
oasisad_data<- lapply(oasisad_study, c)
oasisad_data <- as.data.frame(oasisad_data)
rownames(oasisad_data) = NULL
######################
# Keep index
######################
indx <- niftiarr(brain_mask, 1)
indx <- which(indx == 1, arr.ind = TRUE)
orientations <- c("axial", "coronal", "sagittal")
colnames(indx) <- orientations
oasiad_data <- cbind(oasisad_data, indx)
View(oasiad_data)
######################
# If Keep Voxel Selection
######################
if(!is.null(voxel_select)){
oasisad_data <- oasisad_data[oasisad_data$top_voxels == 1, ]
oasisad_data$top_voxels <- NULL
}
######################
# If select slices
######################
if (!is.null(slices)) {
orientation <- match.arg(orientation)
oasisad_data <- oasisad_data[oasisad_data[, orientation] %in% slices, ]
}
cn <- colnames(oasisad_data)
cn <- setdiff(cn, orientations)
oasisad_data = oasisad_data[, cn]
View(oasisad_data)
oasisad_data <- cbind(oasisad_data, indx, c(1:length(brain_mask)))
View(oasisad_data)
######################
# output voxels within brain mask
######################
oasisad_data <- oasisad_data[which(brain_mask != 0), ]

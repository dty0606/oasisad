a = rbinom(10,10,0.1)
a
a = rbinom(10,2,0.1)
b = rbinom(10,2,0.1)
table(a,b)
6/25*365*1000
temp <- expand.grid(c(x[1]-1,x[1],x[1]+1),
c(x[2]-1,x[2],x[2]+1),
c(x[3]-1,x[3],x[3]+1))
neighbor_cal <- function(x,
nei_seg,
wm_pve,
gm_pve,
csf_pve,
label,
re_value){
# if not surrounded by all white matter, return mean of wmpve
if(sum(nei_seg == label) < length(nei_seg)){
return(mean(wmpve_nei))
} else {
# else return a large value (>1) to suppress its probability as WMH
if(is.null(re_value)){
return(10)
} else {
return(re_value)
}
}
}
#Gaussian smoothing
empty_mask <- niftiarr(brain_mask, 0)
a = c(1,0,0,1,1,1,0)
b=a[a!=0]
b
#data
train_id <- c('0064KW', '0097RS')
valid_id <- '0120LB'
test_id <- '0156ML'
#data
dir_img <- 'C:/Users/dty/Desktop/oasis/Dana_image/all_20_subjects'
train_raw$flair <- sapply(train_id, function(i) readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
#data
library(neurobase)
dir_img <- 'C:/Users/dty/Desktop/oasis/Dana_image/all_20_subjects'
train_id <- c('0064KW', '0097RS')
valid_id <- '0120LB'
test_id <- '0156ML'
#read data
train_raw <- list()
train_raw$flair <- sapply(train_id, function(i) readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
i = '0064KW'
file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))
train_id <- c('0097RS','0120LB')
valid_id <- '0177CR'
test_id <- '0064KW'
#read data
train_raw <- list()
train_raw$flair <- sapply(train_id, function(i)
readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
View(train_raw)
train_raw$flair <- lapply(train_id, function(i)
readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
a = train_raw$flair[[1]]
train_raw$t1 <- lapply(train_id, function(i)
readnii(file.path(dir_img,'T1w',paste0(i,'_flair.nii'))))
train_raw$t1 <- list(readnii(file.path(dir_img,'T1w','0097RS_hires+acpc.nii.gz')),
readnii(file.path(dir_img,'T1w','0120LB_hires+acpc.nii')))
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
train_raw <- list()
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
valid_raw <- list()
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
#read data
train_raw <- list()
train_raw$flair <- lapply(train_id, function(i)
readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
train_raw$t1 <- list(readnii(file.path(dir_img,'T1w','0097RS_hires+acpc.nii.gz')),
readnii(file.path(dir_img,'T1w','0120LB_hires+acpc.nii')))
valid_raw <- list()
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
valid_raw$t1 <- readnii(file.path(dir_img,'T1w','0177CR_hires+acpc.nii.gz'))
train_raw$gs <- list(readnii(file.path(dir_img,'manual_tracing','0097RS_flair_tracing.nii.gz')),
readnii(file.path(dir_img,'manual_tracing','0120LB_flair_tracing.nii')))
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
valid_raw$t1 <- readnii(file.path(dir_img,'T1w','0177CR_hires+acpc.nii.gz'))
valid_raw$gs <- readnii(file.path(dir_img,'manual_tracing','0177CR_flair_tracing.nii'))
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','test','0064KW_flair.nii'))
valid_raw$t1 <- readnii(file.path(dir_img,'T1w','0064KW_hires+acpc.nii.gz'))
valid_raw$gs <- readnii(file.path(dir_img,'manual_tracing','0064KW_flair_tracing.nii'))
flair <- train_raw$flair[[1]]
t1 <- train_raw$t1[[1]]
t2 = NUL
t2 = NULL
pd = NULL
gold_standard = train_raw$gs[[1]]
#data
library(neurobase)
dir_img <- 'C:/Users/dty/Desktop/oasis/Dana_image/all_20_subjects'
train_id <- c('0097RS','0120LB')
valid_id <- '0177CR'
test_id <- '0064KW'
#read data
train_raw <- list()
train_raw$flair <- lapply(train_id, function(i)
readnii(file.path(dir_img,'FLAIR',paste0(i,'_flair.nii'))))
train_raw$t1 <- list(readnii(file.path(dir_img,'T1w','0097RS_hires+acpc.nii.gz')),
readnii(file.path(dir_img,'T1w','0120LB_hires+acpc.nii')))
train_raw$gs <- list(readnii(file.path(dir_img,'manual_tracing','0097RS_flair_tracing.nii.gz')),
readnii(file.path(dir_img,'manual_tracing','0120LB_flair_tracing.nii')))
valid_raw <- list()
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','0177CR_flair.nii'))
valid_raw$t1 <- readnii(file.path(dir_img,'T1w','0177CR_hires+acpc.nii.gz'))
valid_raw$gs <- readnii(file.path(dir_img,'manual_tracing','0177CR_flair_tracing.nii'))
valid_raw <- list()
valid_raw$flair <- readnii(file.path(dir_img,'FLAIR','test','0064KW_flair.nii'))
valid_raw$t1 <- readnii(file.path(dir_img,'T1w','0064KW_hires+acpc.nii.gz'))
valid_raw$gs <- readnii(file.path(dir_img,'manual_tracing','0064KW_flair_tracing.nii'))
#oasis dataframe
flair = train_raw$flair[[1]] ##flair volume of class nifti
t1 = train_raw$t1[[1]]  ##t1 volume of class nifti
t2 = NULL ##t2 volume of class nifti
pd = NULL ##pd volume of class nifti
gold_standard = train_raw$gs[[1]] ##gold standard mask of class nifti
brain_mask = NULL ##brain mask of class nifti
voxel_select = NULL ##a specifed level to remove voxels whose intensity under
top_voxels = NULL
preproc = TRUE ##option to preprocess the data
normalize = TRUE ##option to normalize
image_sm = TRUE ## option to smooth image
slices = NULL #slice vector
orientation = c("axial", "coronal", "sagittal")
return_preproc = FALSE
cores = 1
verbose = TRUE
eroder = TRUE
dir = 'C:/Users/dty/Desktop/test_oasisad'
check_nifti2 = function(x) {
if (is.null(x)) {
return(NULL)
} else {
return(check_nifti(x))
}
}
#check input images are nifti
flair <- check_nifti2(flair)
t1 <- check_nifti2(t1)
t2 <- check_nifti2(t2)
pd <- check_nifti2(pd)
#image preproceesing
if (preproc == TRUE) {
if (verbose) {
message("OASISAD Preprocessing")
}
## the image preproceesing
preprocess <- oasisad_pre(flair = flair,
t1 = t1,
t2 = t2,
pd = pd,
cores = cores,
brain_mask = brain_mask,
verbose = verbose,
dir = dir)
oasisad_study <- preprocess[c("flair","t1", "t2", "pd")]
brain_mask <- preprocess$brain_mask
} else {
## no preprocessing
oasis_study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
}
#' @title OASISAD image preprocessing function
#' @description  MRI image data preprocessing with multiple inputs
#' @param flair Input FLAIR image
#' @param t1 Input T1 image
#' @param t2 Input T2 image
#' @param pd Input PD image
#' @param t1mask A boolean indicates whether use T1 as brain mask or not
#' @param brain_mask Input brain_mask, if null, a mask will be obtained by FSL
#' @param dir A user defined output
#' @param cores A number indicates how many cores used mclapply
oasisad_pre <- function(flair, #flair volume of class nifti
t1, # t1 volume of class nifti
t2 = NULL, # t2 volume of class nifti
pd = NULL, # pd volume of class nifti
t1mask = FALSE, # Brain mask using T1
brain_mask = NULL,
dir = NULL,
cores = 1 # number of cores used in mclapply
){
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
#fast segmention by FSL
fast_seg <- fast(file=brain_mask, outfile=paste(dir),opts= "-N")
brain_mask <- check_nifti(brain_mask)
brain_mask <- brain_mask > 0
brain_mask <- datatyper(brain_mask, trybyte = TRUE)
#mask input images with brain_mask
study <- check_nifti(study)
study <- mclapply(study, mask_img, mask = brain_mask, mc.cores = cores)
study$brain_mask <- brain_mask
##return a list with the preprocessed images and a brain mask
return(study)
}
study <- list(flair = flair, t1 = t1, t2 = t2, pd = pd)
# Remove null modality
nulls <- sapply(study, is.null)
study <- study[!nulls]
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
if (verbose) {
message("Running Brain Extraction Tool\n")
}
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
t1mask = FALSE
if (is.null(brain_mask)) {
if(t1mask)
brain_mask <- fslbet_robust(t1, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
else
brain_mask <- fslbet_robust(flair, remove.neck = T, correct = T, correction = "N4",
recog = T, retimg = TRUE, verbose = F)
}
